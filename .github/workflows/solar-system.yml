name: solar System Workflow

on: 
    workflow_dispatch:
    push:
        branches:
            - main
            - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }} ##superuser
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        services:
            mongo-db:
                image: siddharth67/mongo-db:non-prod
                ports:
                - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: checkout repository
          uses: actions/checkout@v4
          
        - name: setup nodejs version - 18
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: Install Dependencies
          run: npm install

        - name: Unit Testing
          run: npm test

        - name: Archive Test Results
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: code coverage
        container:
            image: node:18
        services:
            mongo-db:
                image: siddharth67/mongo-db:non-prod
                options:
                    --name mongo
        env:
            MONGO_URI: 'mongodb://mango:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - 
            name: checkout-repo
            uses: actions/checkout@v4

        - 
            name: Cache NPM dependencies
            uses: actions/cache@v3
            with:
                path: node_modules
                key: $${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json')}}

    docker:
        needs: [unit-testing, code-coverage]
        permissions:
            packages: write
        name: Containerization
        runs-on: ubuntu-latest
        steps:
        - 
            name: Checkout-repo
            uses: actions/checkout@v4

        - 
            name: Dockerhub login
            uses: docker/login-action@v2.2.0
            with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - 
            name: GHCR login
            uses: docker/login-action@v2.2.0
            with:
                registry: ghcr.io
                username: ${{ github.repository_owner }}
                password: ${{ secrets.GITHUB_TOKEN }}

        -
            name: Build 
            uses: docker/build-push-action@v6
            with:
                context: .
                push: false
                tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - 
            name: Docker Image Testing
            run: |
                docker images
                docker run -d --name solar-system-app \
                    -p 3000:3000 \
                    -e MANGO_URI=$MANGO_URI \
                    -e MONGO_USERNAME=$MONGO_USERNAME \
                    -e MONGO_PASSWORD=$MONGO_PASSWORD \
                    ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

                export IP=$(docker inspect -f '{{ range .NetworkSettings.Networks }}{{.IPAddress}}{{end}}' solar-system-app)
                echo $IP

                echo Testing Image URL using wget 
                wget -q -O - 127.0.0.1:3000/live | grep live

        -
            name: Push
            uses: docker/build-push-action@v6
            with:
                context: .
                push: true
                tags: |
                    ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                    ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
        needs: docker
        runs-on: ubuntu-latest
        steps:
        - name: checkout repo
          uses: actions/checkout@v4

        - name: Install kubectl 
          uses: azure/setup-kubectl@v3
          with:
            version: 'v1.26.0'

        - name: Authenticate to Google
          uses: "google-github-actions/auth@v2"
          with:
            credentials_json: "${{ secrets.GCP_SERVICEACCOUNT_KEY }}"
    
        - uses: "google-github-actions/setup-gcloud@v2"
          with:
            install_components: "gke-gcloud-auth-plugin"
    
        - name: Authenticate to GKE cluster
          uses: google-github-actions/get-gke-credentials@v2
          with:
            cluster_name: my-std-gke-cluster
            location: us-central1-c

        - name: setup KUBECONFIG context
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
        
        - name: Fetch kubernetes cluster details
          run: |
            kubectl version --short
            echo --------------------------------
            kubectl get nodes

        - name: save nginx controller IP as a github env variable
          run: |
            echo "INGRESS_IP=$(kubectl -n ${{ vars.NAMESPACE }} get services ingress-nginx-controller -o jsonpath="{.status.loadbalancer.ingress[0].ip}")" >> $GITHUB_ENV

        - name: Replace Tokens in manifest Files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '${'
            tokenSuffix: '}'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
        
        - name: Check files
          run: |
            cat kubernetes/development/*.yaml

        - name: Create MangoDB secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

        - name: Deploy to Dev Env
          run: |
            kubectl apply -f kubernetes/development/  
